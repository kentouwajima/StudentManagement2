<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="raisetech.StudentManagement2.repository.StudentRepository">

  <!-- 受講生の全件検索 -->
  <select id="search" resultType="raisetech.StudentManagement2.data.Student">
    select * from students
  </select>

  <!-- 特定の受講生を検索 -->
  <select id="searchStudent" resultType="raisetech.StudentManagement2.data.Student">
    select * from students where id = #{id}
  </select>

  <!-- 受講生のコース情報の全件検索 -->
  <select id="searchStudentCourseList" resultType="raisetech.StudentManagement2.data.StudentCourse">
    select * from students_courses
  </select>

  <!-- 特定の受講生のコース情報を取得 -->
  <select id="searchStudentCourse" resultType="raisetech.StudentManagement2.data.StudentCourse">
    SELECT * FROM students_courses WHERE student_id = #{studentId}
  </select>

  <!-- コースステータス情報の全件検索 -->
  <select id="searchCourseStatuses" resultType="raisetech.StudentManagement2.data.CourseStatus">
    select * from course_status
  </select>

  <!-- 受講生IDに紐づくすべてのコースステータス情報を取得 -->
  <select id="searchCourseStatusesByStudentId" resultType="raisetech.StudentManagement2.data.CourseStatus">
    SELECT cs.*
    FROM course_status cs
    INNER JOIN students_courses sc ON cs.student_course_id = sc.id
    WHERE sc.student_id = #{studentId}
  </select>

  <!-- 受講生を登録 -->
  <insert id="registerStudent" parameterType="raisetech.StudentManagement2.data.Student" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO students (name, kana_name, nickname, email, area, age, sex, remark, is_deleted)
    VALUES (#{name}, #{kanaName}, #{nickname}, #{email}, #{area}, #{age}, #{sex}, #{remark}, false)
  </insert>

  <!-- 受講生コース情報を登録 -->
  <insert id="registerStudentCourse" parameterType="raisetech.StudentManagement2.data.StudentCourse" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO students_courses (student_id, course_name, course_start_at, course_end_at)
    VALUES (#{studentId}, #{courseName}, #{courseStartAt}, #{courseEndAt})
  </insert>

  <!-- コースステータス情報を登録 -->
  <insert id="registerCourseStatus" parameterType="raisetech.StudentManagement2.data.CourseStatus" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO course_status (student_course_id, status)
    VALUES (#{studentCourseId}, #{status})
  </insert>

  <!-- 受講生情報を更新 -->
  <update id="updateStudent" parameterType="raisetech.StudentManagement2.data.Student">
    UPDATE students
    SET name = #{name}, kana_name = #{kanaName}, nickname = #{nickname}, email = #{email},
    area = #{area}, age = #{age}, sex = #{sex}, remark = #{remark}, is_deleted = #{isDeleted}
    WHERE id = #{id}
  </update>

  <!-- 受講生コース情報のコース名を更新 -->
  <update id="updateStudentCourse" parameterType="raisetech.StudentManagement2.data.StudentCourse">
    UPDATE students_courses
    SET course_name = #{courseName}
    WHERE id = #{id}
  </update>

  <!-- コースステータス情報を更新 -->
  <update id="updateCourseStatus" parameterType="raisetech.StudentManagement2.data.CourseStatus">
    UPDATE course_status
    SET status = #{status}
    WHERE id = #{id}
  </update>

  <!-- course_status を削除 -->
  <delete id="deleteCourseStatus">
    DELETE FROM course_status WHERE id = #{id}
  </delete>

  <!-- student_course をID指定で1件取得 -->
  <select id="searchStudentCourseById" parameterType="int" resultType="raisetech.StudentManagement2.data.StudentCourse">
    SELECT
    id,
    student_id,
    course_start_at,
    course_end_at
    FROM
    students_courses
    WHERE
    id = #{id}
  </select>

  <!-- 受講生検索条件に基づく詳細検索 -->
  <select id="searchStudentDetailByCondition"
    parameterType="raisetech.StudentManagement2.data.StudentSearchCondition"
    resultType="raisetech.StudentManagement2.data.Student">
    <!-- 受講生情報を検索 -->
    SELECT * FROM students
    <where>
      <!-- 名前による検索（部分一致） -->
      <if test="name != null and name != ''">
        AND name LIKE CONCAT('%', #{name}, '%')
      </if>
      <!-- 地域による検索（部分一致） -->
      <if test="area != null and area != ''">
        AND area LIKE CONCAT('%', #{area}, '%')
      </if>
      <!-- 年齢範囲による検索（ageFrom と ageTo を指定） -->
      <if test="ageFrom != null">
        AND age &gt;= #{ageFrom}
      </if>
      <if test="ageTo != null">
        AND age &lt;= #{ageTo}
      </if>
      <!-- コース名による検索（部分一致） -->
      <if test="courseName != null and courseName != ''">
        AND EXISTS (
        SELECT 1 FROM students_courses
        WHERE students_courses.student_id = students.id
        AND students_courses.course_name LIKE CONCAT('%', #{courseName}, '%')
        )
      </if>
      <!-- ステータスによる完全一致検索 -->
      <if test="status != null and status != ''">
        AND EXISTS (
        SELECT 1
        FROM course_status cs
        INNER JOIN students_courses sc ON cs.student_course_id = sc.id
        WHERE cs.status = #{status}
        AND sc.student_id = students.id
        )
      </if>
    </where>
  </select>
</mapper>